import java.util.Scanner;

public class HighestValuePalindrome {
    public static String highestValuePalindrome(String s, int n, int k) {
        char[] arr = s.toCharArray();
        boolean[] changed = new boolean[n]; // To track which indices were changed

        // Step 1: Convert to a palindrome with minimal changes
        int changesNeeded = 0;
        for (int i = 0; i < n / 2; i++) {
            int j = n - i - 1;
            if (arr[i] != arr[j]) {
                arr[i] = arr[j] = (char) Math.max(arr[i], arr[j]); // Set both to the larger value
                changed[i] = true;
                changesNeeded++;
            }
        }

        // If we need more changes than allowed, return -1
        if (changesNeeded > k) {
            return "-1";
        }

        // Step 2: Maximize the palindrome value
        int remainingChanges = k - changesNeeded;
        for (int i = 0; i < n / 2; i++) {
            int j = n - i - 1;
            if (arr[i] != '9') {
                if (changed[i] && remainingChanges > 0) {
                    arr[i] = arr[j] = '9';
                    remainingChanges--;
                } else if (!changed[i] && remainingChanges > 1) {
                    arr[i] = arr[j] = '9';
                    remainingChanges -= 2;
                }
            }
        }

        // If there's one change left and the string has an odd length, change the middle character to '9'
        if (n % 2 == 1 && remainingChanges > 0) {
            arr[n / 2] = '9';
        }

        return new String(arr);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        String s = scanner.next();
        scanner.close();

        System.out.println(highestValuePalindrome(s, n, k));
    }
}
