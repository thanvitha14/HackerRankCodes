import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

import java.util.*;

public class Solution {
    
    // Function to find number of valid pairs
    public static int divisibleSumPairs(int n, int k, int[] ar) {
        int count = 0;
        int[] remainderCount = new int[k];
        
        // Count the occurrences of each remainder
        for (int i = 0; i < n; i++) {
            int remainder = ar[i] % k;
            int complement = (k - remainder) % k;
            
            // If there's a previous number with the complement remainder, it forms a valid pair
            count += remainderCount[complement];
            
            // Increment the count for the current remainder
            remainderCount[remainder]++;
        }
        
        return count;
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        // Read the input values
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] ar = new int[n];
        
        for (int i = 0; i < n; i++) {
            ar[i] = sc.nextInt();
        }
        
        // Call the function to find the number of divisible pairs
        int result = divisibleSumPairs(n, k, ar);
        
        // Print the result
        System.out.println(result);
        
        sc.close();
    }
}
